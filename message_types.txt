messaging spec:

every message has a type field and a payload field. the type determines the structure of the payload.

fields of type `order` have the following dict structure:
`order` := {
    timestamp: `float`,
    price: `int`,
    volume: `int`,
    is_bid: `boolean`,
    pcode: `string`,
    traded_volume: `int`,
    order_id: `int`,
    asset_name: `string`,
}

inbound messages (frontend -> backend):

# enter a regular limit order
{
    type: 'enter',
    payload: {
        price: `int`,
        volume: `int`,
        is_bid: `boolean,
        pcode: `string`,
        asset_name: `string`,
    }
}

# cancel an order
{
    type: 'cancel',
    payload: `order`,
}

outbound messages (backend -> frontend):

# confirm that a new order was entered
{
    type: 'confirm_enter',
    payload: `order`,
}

# confirm that a trade occurred
# 
# timestamp field is the time the trade occurred
# the taking_orders field is a list of dicts representing the orders that were in the market when this trade
# occured. the timestamp field in these dicts is the time the order was entered
{
    type: 'confirm_trade',
    payload: {
        timestamp: `float`,
        asset_name: `string`,
        taking_order: `order`,
        making_orders: [
            `order`,
            ...
        ]
    }
}

# confirm that an order was canceled
{
    type: 'confirm_cancel',
    payload: `order`
}

# report some error to the frontend
{
    type: 'error',
    payload: {
        pcode: `string`,
        message: `string`,
    }
}