messaging spec:

every message has a type field and a payload field. the type determines the structure of the payload.

inbound messages (frontend -> backend):

# enter a regular limit order
{
    type: 'enter',
    payload: {
        price: `int`,
        is_bid: `boolean,
        pcode: `string`,
        asset_name: `string`,
    }
}

# cancel an order
{
    type: 'cancel',
    payload: {
        price: `int`,
        pcode: `string`,
        order_id: `int`,
        asset_name: `string`,
        is_bid: `boolean`,
    }
}

outbound messages (backend -> frontend):

# confirm that a new order was entered
{
    type: 'confirm_enter',
    payload: {
        timestamp: `float`,
        price: `int`,
        is_bid: `boolean`,
        pcode: `string`,
        asset_name: `string`,
        order_id: `int`,
    }
}

# confirm that a trade occurred
{
    type: 'confirm_trade',
    payload: {
        timestamp: `float`,
        price: `int`,
        bid_pcode: `string`,
        ask_pcode: `string`,
        bid_order_id: `int`,
        ask_order_id: `int`,
        asset_name: `string`,
    }
}

# confirm that an order was canceled
{
    type: 'confirm_cancel',
    payload: {
        order_id: `int`,
        is_bid: `boolean`,
        asset_name: `string`,
        pcode: `string`,
    }
}

# report some error to the frontend
{
    type: 'error',
    payload: {
        pcode: `string`,
        message: `string`,
    }
}